// @Library('default') _

properties (
    [
    buildDiscarder (
            logRotator (
                numToKeepStr: '7',
                artifactNumToKeepStr: '7'
            ),
        ),
    disableConcurrentBuilds(),
    office365ConnectorWebhooks([[
        name: 'ConfigServer',
        url: 'https://outlook.office.com/webhook/2b80f405-da6f-4bc0-ad89-28cc2c93aee4@3048dc87-43f0-4100-9acb-ae1971c79395/JenkinsCI/e98b302061c84625bd714827463572fe/7ed12f4b-1876-485a-b89b-d128bd0a9122',
        startNotification: true,
        notifySuccess: true,
        notifyAborted: false,
        notifyNotBuilt: false,
        notifyUnstable: true,
        notifyFailure: true,
        notifyBackToNormal: true,
        notifyRepeatedFailure: false,
        timeout: 30000
        ]]
    )
    ]
)

try {

    if (env.BRANCH_NAME == 'main') {
        node('docker-agent') {
            
            sh '''apt-get update && apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg-agent \
            software-properties-common \
            && curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - \
            && add-apt-repository \
            "deb [arch=amd64] https://download.docker.com/linux/debian \
            $(lsb_release -cs) \
            stable" \
            && apt-get update \
            && apt-get install -y docker-ce-cli \
            && rm -fr /var/lib/apt/lists/*'''

            docker.image('maven:3-jdk-11').inside() {
                withCredentials([sshUserPrivateKey(credentialsId: "git", keyFileVariable: 'keyfile')]) {
                    sh 'mkdir ~/.ssh && cp $keyfile ~/.ssh/id_rsa && chmod 400 ~/.ssh/id_rsa'
                    sh 'ssh-keyscan github.com >> ~/.ssh/known_hosts'
                }

                stage('Checkout') {
                    checkout scm
                }

                stage('Build') {
                    sh 'mvn install -DskipTests'
                }
                
                stage('Test') {
                    withSonarQubeEnv() {
                        sh 'mvn install'
                        sh 'mvn sonar:sonar'
                    }
                    timeout(time: 1, unit: 'MINUTES') {
                        qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            throw new RuntimeException("Pipeline aborted due to quality gate coverage failure: ${qg.status}")
                        }
                    }
                }
                
                stage ('Publish') {
                    echo 'Artifact uploaded to Nexus Repository Manager OSS'
                }
            }
        }
    }
} catch (org.jenkinsci.plugins.workflow.steps.FlowInterruptedException flowInterrupted) {
    throw flowInterrupted
} catch (e) {
    throw e
}
